- name: Fail if the OS is not supported
  fail:
    msg="This role is not supported on {{ansible_distribution}}"
  when: "ansible_distribution != 'Ubuntu' and ansible_os_family != 'RedHat'"

- name: Include distribution-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "vars/{{ ansible_distribution|lower }}.yml"
    - "vars/{{ ansible_os_family|lower }}.yml"

- name: Install OpenJDK 7
  package: name="{{ openjdk_7_headless }}" state=present

- name: Check that the certificates exists
  stat: path=marathon.key
  register: marathon_key
- block:

    - name: generate keystore
      vars:
        key_password: "{{marathon_key_password}}"
        pkcs_password: "{{marathon_jks_password}}"
        jks_password: "{{marathon_jks_password}}"
      include: enable_ssl.yml
    
  when: marathon_key.stat.exists == False
  tags: marathon


- name: run marathon container
  docker:
    name: marathon
    image: "{{ marathon_image }}"
    state: reloaded
    detach: true
    restart_policy: always
    net: host
    volumes:
    - "{{ marathon_keystore_path }}:{{ marathon_keystore_path }}"
    env:
      MARATHON_HOSTNAME: "{{ marathon_hostname }}" 
      MARATHON_HTTP_ADDRESS: "{{ marathon_hostname }}" 
      MARATHON_HTTPS_ADDRESS: "{{ marathon_hostname }}"
      MARATHON_MASTER: "{{ marathon_master_peers }}"
      MARATHON_ZK: "{{ marathon_zk_peers }}/{{ marathon_framework_name }}" 
      MARATHON_FRAMEWORK_NAME: "{{ marathon_framework_name }}"
      MARATHON_HTTPS_PORT: "{{ marathon_https_port }}"
      MARATHON_SSL_KEYSTORE_PASSWORD: "{{ marathon_jks_password }}"
      MARATHON_SSL_KEYSTORE_PATH: "{{ marathon_keystore_path }}"
      MARATHON_HTTP_CREDENTIALS: "{{marathon_username}}:{{marathon_password|mandatory}}"
  tags: marathon


- name: register marathon service with curl check
  uri: 
     url: "http://localhost:8500/v1/agent/service/register"
     validate_certs: "no"
     method: PUT
     HEADER_Content-Type: "application/json"
     body: "{{ lookup('template', 'templates/marathon-service.json') }}"
     body_format: json
  register: result
  until: result.status == 200
  retries: 3
  delay: 10
  changed_when: false
  when: service_discovery == "consul"
  tags:
    - marathon

#  consul:
#    service_name: marathon
#    service_port: "{{marathon_https_port}}"
#    script: "curl -k -u {{marathon_username}}:{{marathon_password}} https://{{marathon_hostname}}:{{marathon_https_port}}"
#    interval: 10s
#    tags: marathon

- include: apps.yml
  when: service_discovery == "consul"

