- name: Ensure local certs directory exists
  file: state=directory path={{ trust_anchor_root_dir }}

- name: Install rootCA certificate
  copy: src=rootCA.crt dest={{ trust_anchor_root_dir }}/rootCA.crt
  notify:
    - update root trust anchor

# Force handler flush so that the rootCA is immediately taken into account
- meta: flush_handlers

- name: Copy root CA key and crt
  copy: src={{item}} dest=/tmp/{{item}}
  with_items:
   - rootCA.crt
   - rootCA.key

- name: Generate a Self Signed certificate
  block:      
    - openssl_privatekey:
        path: "{{ marathon_ssl_key_file }}"
        passphrase: "{{ key_password }}"
        cipher: auto

    - openssl_csr:
        path: "{{ marathon_ssl_csr_file }}"
        privatekey_path: "{{ marathon_ssl_key_file }}"
        privatekey_passphrase: "{{ key_password }}"
        common_name: "{{ openssl_self_signed.name }}"
        country_name: "{{ openssl_self_signed.country }}"
        organization_name: "{{ openssl_self_signed.organization }}"
        organizational_unit_name: "{{ openssl_self_signed.unit }}" 
        state_or_province_name: "{{ openssl_self_signed.state }}"
        email_address: "{{ openssl_self_signed.email }}"

    - openssl_certificate:
        provider: ownca
        path: "{{ marathon_ssl_cert_file }}"
        privatekey_path: "{{ marathon_ssl_key_file }}"
        privatekey_passphrase: "{{ key_password }}"
        csr_path: "{{ marathon_ssl_csr_file }}"
        ownca_path: /tmp/rootCA.crt
        ownca_privatekey_path: /tmp/rootCA.key
  when: marathon_ssl_cert_gen == "self_signed"


- include_role:
    name: geerlingguy.certbot
  vars:  
    certbot_auto_renew: true
    certbot_create_if_missing: true
    certbot_create_method: standalone
    certbot_admin_email: "{{ marathon_certbot_admin_email }}"
    certbot_certs:
      - domains:
          - "{{ marathon_dns_name }}"  
  when: marathon_ssl_cert_gen == "letsencrypt"     


- name: extract pcks12
  command: openssl pkcs12 -inkey "{{ marathon_ssl_key_file }}" -passin "env:MARATHON_KEY_PASSWORD" -name marathon -in "{{ marathon_ssl_cert_file }}" -password "env:MARATHON_PKCS_PASSWORD" -export -out marathon.pkcs12
  environment:
    MARATHON_KEY_PASSWORD: "{{ key_password }}"
    MARATHON_PKCS_PASSWORD: "{{ pkcs_password }}"

- name: create keystore dir
  file: path="{{ marathon_keystore_path | dirname }}" state=directory

- name: generate keystore
  command: keytool -importkeystore -noprompt -srckeystore marathon.pkcs12 -srcalias marathon -srcstorepass $MARATHON_PKCS_PASSWORD -srcstoretype PKCS12 -destkeystore "{{ marathon_keystore_path}}" -deststorepass $MARATHON_JKS_PASSWORD
  environment: 
    MARATHON_PKCS_PASSWORD: "{{ pkcs_password }}"
    MARATHON_JKS_PASSWORD: "{{ jks_password }}"
